@page "/"
@using Blazor.Extensions;
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D;
@using BreakOutGame.BreakoutGame;
@using BreakoutGame.Helpers;
@inject IJSRuntime JSRuntime;

<BECanvas Width="_gameWidth" Height="_gameHeight" @ref="_canvasReference"></BECanvas>

@code {
    private Canvas2DContext _context;
    private InputHandler _inputHandler;

    private const int _gameHeight = 600;
    private const int _gameWidth = 800;

    protected BECanvasComponent _canvasReference;

    private Ball _ball;
    private Paddle _paddle;

    delegate Task RunGameLoop();

    protected override Task OnInitializedAsync()
    {

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this._context = await this._canvasReference.CreateCanvas2DAsync();

        InitalizeGameObjects();
        await DrawGameObject();

        _inputHandler = new InputHandler(_paddle);
        if (firstRender)
        {
            var jsInterop = new JsInteropHelper(JSRuntime, _inputHandler);
            await jsInterop.CallInitPaddleActions();
        }
    }

    public async Task GameLoop()
    {
        await _context.ClearRectAsync(0, 0, _gameWidth, _gameHeight);

        UpdateGameObjects();
        await DrawGameObject();
    }

    private void UpdateGameObjects()
    {
        this._ball.Update();
        this._paddle.Update();
    }

    private async Task DrawGameObject()
    {
        await this._ball.Draw(_context);
        await this._paddle.Draw(_context);
    }

    private void InitalizeGameObjects()
    {
        this._ball = new Ball(_gameWidth, _gameHeight);
        this._paddle = new Paddle(_gameWidth, _gameHeight);
    }
}